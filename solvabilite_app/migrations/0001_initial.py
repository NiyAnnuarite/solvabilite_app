# Generated by Django 4.2 on 2025-10-12 10:33

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Compagnie',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nom', models.CharField(max_length=200)),
                ('siren', models.CharField(max_length=9, unique=True)),
                ('date_creation', models.DateField()),
                ('capital_social', models.DecimalField(decimal_places=2, max_digits=15)),
            ],
        ),
        migrations.CreateModel(
            name='DonneesSolvabilite',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_reference', models.DateField(default=django.utils.timezone.now)),
                ('fonds_propres', models.DecimalField(decimal_places=2, max_digits=15)),
                ('passif_technique', models.DecimalField(decimal_places=2, max_digits=15)),
                ('prime_annuelle', models.DecimalField(decimal_places=2, max_digits=15)),
                ('scr_marche', models.DecimalField(decimal_places=2, default=0, max_digits=15)),
                ('scr_credit', models.DecimalField(decimal_places=2, default=0, max_digits=15)),
                ('scr_vie', models.DecimalField(decimal_places=2, default=0, max_digits=15)),
                ('scr_non_vie', models.DecimalField(decimal_places=2, default=0, max_digits=15)),
                ('scr_operational', models.DecimalField(decimal_places=2, default=0, max_digits=15)),
                ('mcr', models.DecimalField(decimal_places=2, default=0, max_digits=15)),
                ('ratio_solvabilite', models.DecimalField(decimal_places=2, default=0, max_digits=5)),
                ('date_saisie', models.DateTimeField(auto_now_add=True)),
                ('compagnie', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='solvabilite_app.compagnie')),
            ],
            options={
                'ordering': ['-date_reference'],
            },
        ),
        migrations.CreateModel(
            name='CalculSCR',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('methode_calcul', models.CharField(max_length=100)),
                ('parametres_calcul', models.JSONField(default=dict)),
                ('resultat_scr', models.DecimalField(decimal_places=2, max_digits=15)),
                ('date_calcul', models.DateTimeField(auto_now_add=True)),
                ('donnees', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='solvabilite_app.donneessolvabilite')),
            ],
            options={
                'verbose_name': 'Calcul SCR',
                'verbose_name_plural': 'Calculs SCR',
                'ordering': ['-date_calcul'],
            },
        ),
        migrations.CreateModel(
            name='Utilisateur',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('role', models.CharField(choices=[('ACTUAIRE', 'Actuaire'), ('RISK_MANAGER', 'Risk Manager'), ('CONTROLEUR', 'Contrôleur de Gestion'), ('DG', 'Directeur Général'), ('ADMIN', 'Administrateur'), ('REGULATEUR', 'Régulateur'), ('CLIENT', 'Client')], max_length=20)),
                ('telephone', models.CharField(blank=True, max_length=20)),
                ('compagnie', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='solvabilite_app.compagnie')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
